#pragma once
// 
// Name: Your First Name & Last Name & Student ID Number
// Assignment #: 2  Submission Date: 9/28/23
//
#ifndef _CONTAINER_HPP
#define _CONTAINER_HPP

#include <iostream>
#include <string>

template <class T>
class Container {
public:
    //destructor
    virtual ~Container() {};

    //create the dynamic array with size s
    virtual bool resize(int s) = 0;

    // Checks if the container has no elements
    virtual bool empty() = 0;

    // Returns the number of elements in and/or the size of the container.
    virtual int size() = 0;

    virtual T* begin() = 0;
    virtual T* end() = 0;

    // For a container c, the expression 
    // c.front() is equivalent to *c.begin(), undefined if empty()
    virtual T& front() = 0;

    // For a non-empty container c, the expression 
    // c.back() is equivalent to *std::prev(c.end()), undefined if empty
    virtual T& back() = 0;

    // std::out_of_range exception thrown if !(position < size()).
    virtual T& at(int position) = 0;

    // If size() is 0, data() may or may not return a null pointer.
    virtual T* data() = 0;
    virtual const T* data() const = 0;

    // return reference to the requested element.
    virtual T& operator[] (int position) = 0;
};
#endif
